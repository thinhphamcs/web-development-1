@charset "utf-8";

/*
   New Perspectives on HTML5 and CSS3, 7th Edition
   Tutorial 5
   Case Problem 2

   Author: ThinhPham_244079
   Date: 3/28/2018

   Filename: wc_styles.css

   This file contains the layout styles and media
   queries used with sample pages from the Willet
   Creek Golf Course website.

*/


/* Import Design Styles */

/*
Step 3:

Use the @import rule to import the style rules from the wc_designs.css file.
Write the rule so that the imported style sheet should only be used with
screen devices.
*/
@import url('wc_designs.css') screen;

/* Flex Layout Styles */

/*
Step 4:

Create a style rule for the page body that displays the body as a flexbox
oriented in the row direction with wrapping. As always, include the WebKit
browser extension in all of your flex styles.
*/
body {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row wrap;
    flex-flow: row wrap;
}

/*
Step 5:

Two of the child elements of the page body are a navigation list with the ID
hole_list and an article element containing information about the current hole.
Add a style rule that sets the flex growth, shrink, and basis size values of
the hole_list navigation list to 1, 3, and 140 pixels.
*/
#hole_list {
    flex-grow: 1;
    flex-shrink: 3;
    flex-basis: 140px;
}

/*
Step 6:

Add a style rule that sets the flex growth, shrink, and basis size values of
the article element to 3, 1, and 341 pixels.

Step 7:

The article element contains statistics and a summary about the current hole.
 Michael also wants this element to be treated as a flexbox. Add to the
 style rule for the article element styles that display the element as a
 flexbox oriented in the row direction with wrapping.
*/
article {
    flex-grow: 3;
    flex-shrink: 1;
    flex-basis: 341px;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row wrap;
    flex-flow: row wrap;
}

/*
Step 8:

The two items within the article element are a section element with the
ID stats and a section element with the ID summary. Create a style rule for
the stats section that sets its flex growth, shrink, and basis values to
1, 4, and 120 pixels.

Step 9:

Create a style rule for the summary section that sets its flex growth, shrink,
 and basis values to 4, 1, and 361 pixels respectively.
*/
#stats  {
    flex-grow: 1;
    flex-shrink: 4;
    flex-basis: 120px;
}

#summary {
    flex-grow: 4;
    flex-shrink: 1;
    flex-basis: 361px;
}

/*
Step 10:

The aside element contains an advertisement for other services offered by
the Willet Creek Resort. Add a style rule that displays this element as a
flexbox in row orientation with wrapping.
*/
aside {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row wrap;
    flex-flow: row wrap;
}

/*
Step 11:

Information about individual services are saved in a div element within the
aside element. Michael wants these div elements to be laid out with equal
flex sizes. Create a style rule for every div element within the aside element
that sets the flex growth and shrink values to 1 and the basis value to 180 pixels.
*/
aside > div {
    flex-basis: 180px;
    flex-grow: 1;
    flex-shrink: 1;
}

/* =============================
	Mobile Styles: 0 - 480 pixels
   =============================
*/

/*
Step 12:

Next, you’ll design the layout for the mobile version of the page.
Go to the Mobile Styles section and add a media query for screen devices with
a maximum width of 480 pixels.
*/
@media only screen and (max-width:480px) {

  /*
  Step 13:

  Under the mobile layout, Michael wants the navigation list containing links to
  the 18 holes on the course to be displayed near the bottom of the page. Create
  a style rule that sets the flex order of the hole_list navigation list to 99.
  Create a style rule that sets the flex order of the footer to 100.
  */
  nav#hole_list {
    -webkit-order: 99;
    order: 99;
  }
  footer {
    -webkit-order: 100;
    order: 100;
  }

  /*
  Step 14:

  To reduce clutter, Michael wants the horizontal navigation list at the top of
  the page to be hidden unless the user taps a navicon. Create this hidden menu
  system by adding the following style rules to:
  A. hide the display of the ul element within the horizontal navigation list.
  B. change the display property of the ul element to block if the user hovers
  over the navicon hypertext link or hovers over the unordered list within the
  horizontal navigation list.
  */
  nav.horizontal > ul {
    display: none;
  }
  nav.horizontal:hover ul {
    display: block;
  }

  /*
  Step 15:

  Michael also wants to hide the aside element when the page is viewed on a mobile
  device. Add a style rule to accomplish this.
  */
  aside {
    display:none;
  }
}

/* =================================================
	Tablet and Desktop Styles: 481 pixels and greater
   =================================================
*/

/*
Step 16:

Next, you’ll create the styles that will be used for tablet and desktop devices.
Create a media query for all screen devices with a width of at least 481 pixels.
*/
@media only screen and (min-width:481px){

  /*
  Step 17:

  Within the media query, create a style rule that hides the display of the navicon.
  */
  a#navicon {
    display:none;
  }

  /*
  Step 18:

  For these wider screens, Michael wants the horizontal navigation list to be laid
  out within a single row. Create a style rule that changes the display of the ul
  element within the horizontal navigation list to a flexbox that is oriented in
  the row direction with no wrapping.
  */
  nav.horizontal > ul {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row;
    flex-flow: row;
  }

  /*
  Step 19:

  For every list item in the ul element in the horizontal navigation list, set the
  growth and shrink values to 1 and the basis value to auto so that the list
  items grow and shrink together on the same row.
  */
  nav.horizontal > ul > li {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis:auto;     
  }
}
